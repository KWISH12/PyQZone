import os
import threading
import time
import random
import webbrowser
import keyboard
import pyautogui
from tkinter import *
from tkinter import filedialog, messagebox
import subprocess
import uuid
import sys
import requests

# ====== –°–°–´–õ–ö–ò ======
FUNPAY_URL = "https://funpay.com/users/6551539/"
TELEGRAM_URL = "https://t.me/PyQZone"
REVIEWS_URL = "https://t.me/+kosYl4xb3EFkZWRi"

# ====== –°–°–´–õ–ö–ê –ù–ê –û–ë–ù–û–í–õ–ï–ù–ò–ï ======
UPDATE_URL = "https://raw.githubusercontent.com/KWISH12/PyQZone/main/script.py"

HWID_FILE = "hwid_lock.txt"

# ====== –ü–æ–ª—É—á–µ–Ω–∏–µ HWID (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ) ======
def get_hwid():
    try:
        output = subprocess.check_output('wmic csproduct get uuid', shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)
        output = output.decode().split('\n')[1].strip()
        if output and output != "FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF":
            return output
    except Exception:
        pass
    try:
        mac = uuid.getnode()
        if (mac >> 40) % 2 == 0:
            return ':'.join(("%012X" % mac)[i:i+2] for i in range(0, 12, 2))
    except Exception:
        pass
    return None

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ HWID ======
def check_and_lock_hwid():
    current_hwid = get_hwid()
    if current_hwid is None:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HWID. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
        sys.exit(1)

    if os.path.exists(HWID_FILE):
        with open(HWID_FILE, "r") as f:
            saved_hwid = f.read().strip()
        if saved_hwid != current_hwid:
            messagebox.showerror("–û—à–∏–±–∫–∞", "HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω.")
            sys.exit(1)
    else:
        with open(HWID_FILE, "w") as f:
            f.write(current_hwid)
        messagebox.showinfo("–ü—Ä–∏–≤—è–∑–∫–∞", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É.\nHWID: {current_hwid}")

# ====== –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ======
def check_for_update():
    try:
        response = requests.get(UPDATE_URL, timeout=10)
        response.encoding = "utf-8"
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: HTTP {response.status_code}")
            return
        new_code = response.text
        with open(__file__, "r", encoding="utf-8") as f:
            current_code = f.read()
        if new_code.strip() != current_code.strip():
            with open(__file__, "w", encoding="utf-8") as f:
                f.write(new_code)
            messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –µ—ë.")
            sys.exit(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# ====== –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç–∞ ======
def add_typos(text):
    result = ""
    for char in text:
        if random.random() < 0.03:
            result += random.choice("asdfghjklqwertyuiop")
        result += char
    return result

def auto_type(text, interval, count, typos):
    lines = text.splitlines()
    for i in range(count):
        line = lines[i % len(lines)]
        if typos:
            line = add_typos(line)
        for char in line:
            pyautogui.typewrite(char)
            time.sleep(interval / 10)
        pyautogui.press("enter")
        time.sleep(interval)

def start_auto_type():
    try:
        interval = float(interval_entry.get())
        lines = int(lines_entry.get())
        text = text_area.get("1.0", END).strip()
        if not text:
            messagebox.showwarning("‚ö†Ô∏è", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return
        threading.Thread(target=auto_type, args=(text, interval, lines, typo_var.get()), daemon=True).start()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≤–µ—Ä—å –ø–æ–ª—è –≤–≤–æ–¥–∞.\n{e}")

def listen_hotkey():
    hotkey = hotkey_entry.get().lower()
    pressed = False
    while True:
        if keyboard.is_pressed(hotkey) and not pressed:
            pressed = True
            start_auto_type()
        elif not keyboard.is_pressed(hotkey):
            pressed = False
        time.sleep(0.1)

def load_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, "r", encoding="utf-8") as f:
            text_area.delete("1.0", END)
            content = f.read()
            text_area.insert("1.0", content)
        messagebox.showinfo("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(content.splitlines())} —Å—Ç—Ä–æ–∫.")

# ====== GUI ======
root = Tk()
root.title("üî• AutoText ‚Äî by PyQZone")
root.configure(bg="#1a0000")
root.geometry("430x560")
root.resizable(False, False)

# ====== –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ======
webbrowser.open_new_tab(FUNPAY_URL)
webbrowser.open_new_tab(TELEGRAM_URL)

# ====== HWID –ø—Ä–æ–≤–µ—Ä–∫–∞ ======
check_and_lock_hwid()

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ======
check_for_update()

# ====== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ======
Button(root, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", bg="darkred", fg="white", command=load_file).pack(pady=10)

Label(root, text="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é:", bg="#1a0000", fg="white").pack()
text_area = Text(root, height=6, width=45, bg="#300000", fg="white")
text_area.pack(pady=5)

Label(root, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):", bg="#1a0000", fg="white").pack()
interval_entry = Entry(root, bg="#300000", fg="white")
interval_entry.insert(0, "1")
interval_entry.pack()

Label(root, text="–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫:", bg="#1a0000", fg="white").pack()
lines_entry = Entry(root, bg="#300000", fg="white")
lines_entry.insert(0, "5")
lines_entry.pack()

Label(root, text="–ö–ª–∞–≤–∏—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, f8):", bg="#1a0000", fg="white").pack()
hotkey_entry = Entry(root, bg="#300000", fg="white")
hotkey_entry.insert(0, "f8")
hotkey_entry.pack(pady=5)

typo_var = BooleanVar()
Checkbutton(root, text="–î–æ–±–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç", variable=typo_var, bg="#1a0000", fg="white").pack(pady=5)

Button(root, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", bg="red", fg="white", command=start_auto_type).pack(pady=10)

# ====== –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ======
bottom_frame = Frame(root, bg="#1a0000")
bottom_frame.pack(pady=10)

Button(bottom_frame, text="üí¨ –û—Ç–∑—ã–≤—ã", bg="darkred", fg="white", command=lambda: webbrowser.open(REVIEWS_URL)).pack(side=LEFT, padx=5)
Button(bottom_frame, text="üë§ Telegram", bg="darkred", fg="white", command=lambda: webbrowser.open(TELEGRAM_URL)).pack(side=LEFT, padx=5)
Button(bottom_frame, text="üõí FunPay", bg="darkred", fg="white", command=lambda: webbrowser.open(FUNPAY_URL)).pack(side=LEFT, padx=5)

# ====== –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è hotkey ======
threading.Thread(target=listen_hotkey, daemon=True).start()

root.mainloop()
